
linux提供的socket函数
创建一个socket如下:
   socket = fd; 获得一个文件描述符
   socket.bind
   socket.listen
   socket.accept

追踪程序子进程/启动线程数等等信息命令
    strace -ff -o ./ooxx    java TestSocket
   命令           输出的路径  执行的命令

java中的线程在linux中是要进行clone

中断 -> 会产生一个中断事件 , 如果是epoll的话就知道这个是什么事件类型,就可以给epoll_wait中存放该事件,java中的select()就有返回数
通过selector.selectedKeys()就可以获得该事件的数据

网卡

IO多路复用: select/poll/epoll都实现了IO多路复用

epoll实现了事件驱动和IO多路复用
   epoll ->
        epoll_create
        epoll_ctl
        epoll_wait : 就是在java代码里调用select的返回数据(如果有的话)

/proc/pid/fd  文件描述符(Linux中一切皆文件): 相当于 打开的文件 或者是一个 socket
    0 : 标准输入
    1 : 标准输出
    2 : 错误输出

TCP : 面向连接的 可靠的传输协议

  三次握手:
    A:客户端 B:服务端
    A -> B 发送sync
    B -> A 响应请求sync + ack
    A -> B 发送ack
  四次分手:
    A -> B 发送fin
    B -> A 响应fin + ack
    B -> A 发送断开连接命令fin
    B -> A 响应断开ack
  粒度: 不应该被拆散,意思是三次捂手 A -> B 了, 后续的就不要发给 A -> C
抓包程序命令:
    tcpdump -nn -i eth0 port 80
    [P.] : 告知tcp数据已经到达完整了,停止缓存数据,立即执行

ps -fe | grep nc

/proc/pid/fd 服务端会开启一个监听的文件描述符


追踪程序对内核的调用:
  strace -ff -o 保存的路径 需要执行的命令
  如 strace -ff -o ./log nc -lk 8080
  strace less filename

man 2 socket
man 2 bind
man 2 listen
man 2 accept

系统调用(system call): read write socket bind listen accept等等
kernel内核提供上述方法的实现,对系统暴露函数

应用 -> socket -> 内核

linux创建线程是通过clone函数

epoll_create : 创建一个epoll专用的文件描述符.它其实是在内核申请一空间，用来存放你想关注的socket fd上是否发生以及发生了什么事件
epoll_ctl    : 该函数用于控制某个epoll文件描述符上的事件，可以注册事件，修改事件，删除事件。
epoll_wait   : 该函数用于轮询I/O事件的发生

zero copy零拷贝:内核实现 sendfile函数
直接内存: 共享空间buffer mmap

mysql:

    hash表 :使用等值查询,不适合范围查询,排序,分组
    innodb

Object o = new Object : 开启压缩则占用16个字节,不开启压缩也是16字节
注意在64位操作系统默认开启指针压缩,jvm参数
-XX:+UseCompressClassPointer 开启指针压缩(默认开启)
-XX:-UseBiasedLocking 禁用偏向锁

对象布局:
    markword
    class pointer  类型指针,指向所属的Class实例的指针
    instance data  实例数据
    padding        对齐(只要累计的字节数不是8的倍数,那么就需要进行填充,直到为8的倍数)
  注意:: markword +  class pointer = 对象头

汇编:
    CPU的组成:
        运算器进行信息处理;
        寄存器进行信息存储;
        控制器协调各种器件进行工作;
        内部总线实现CPU内各个器件之间的联系.
    寄存器是CPU内部的信息存储单元:
        8086COU有14个寄存器:
          通用寄存器: AX,BX,CX,DX
          变址寄存器: SI,DI
          指针寄存器: SP(栈顶指针寄存器,存放栈顶的偏移地址),BP
          指令指针寄存器: IP
          段寄存器: CS(代码段寄存器),SS(栈段寄存器,存放栈顶的段地址),DS(数据段寄存器),ES(额外附加段寄存器,只有在段寄存器不够用的情况下会使用)
          标志寄存器: PSW
        共性:
            8086CPU所有的寄存器都是16位的,可以存放2个字节
    问题:8086上一代COU中的寄存器都是8位的,如何保证程序的兼容性?
    方案: 通用寄存器均可以分为两个独立的8位寄存器使用.
    细化:
          AX可以分为AH(高8位)和AL(低8位)
          BX可以分为BH(高8位)和BL(低8位)
          CX可以分为CH(高8位)和CL(低8位)
          DX可以分为DH(高8位)和DL(低8位)
    "字"在寄存器中的存储:
        8086是16位CPU,字长(word size)为16bit
        一个字(word)可以存在一个16位寄存器中
        这个字的高位字节存在这个寄存器的高8位寄存器
        这个字的低位字节存在这个寄存器的低8位寄存器
    汇编指令(汇编指令不区分大小写):
        mov ax,18 => 相当于 ax = 18
        add ax,8 => 相当于 ax += 8
        mov ax,bx => 将寄存器bx的数据送入寄存器ax
        jmp
        push
        pop
        and(与运算)
        or(或运算)
        loop 循环指令,cx中要提前存放循环次数
           示例:
                 mov cx,10
              s: add ax,ax
                 loop s
        call: 调用子程序
            实质: 流程转移,call指令实现转移的方法和jmp指令的原理类似
            CPU执行call指令,进行两步操作:
                1.将当前的IP(就是call指令的下一条指令)或者CS和IP压入栈中.
                2.转移到标号处执行指令.
            含义如下:
                (1) (sp) = (sp) -2
                    ((ss)*16 + (sp)) = (IP)
                (2) (IP) = (IP) + 16位位移
            示例:
                mov ax,0
                call s
                mov ax ,4c00h
                int 21h

              s: add ax,1
                ret

    物理地址:
        CPU访问内存单元时要给出内存单元的地址.
        所有的内存单元构成的存储空间是一个一维的线性空间.
        每一个内存单元在这个空间中都有唯一的地址,这个唯一的地址称为物理地址.
        事实:
            8086有20位地址总线,可以传送20位地址,寻址能力为1M;
            8086是16位结构的COU
                运算器一次最多可以处理16位的数据,寄存器的最大宽度为18位.
                在8086内部处理的,传输,暂存的地址也是16位寻址能力也只有64KB
        问题: 8086如何处理寻址空间上的矛盾?
            8086CPU的解决方法:
                用2个16位地址(段地址(也成基地址),偏移地址),合成一个20位的物理地址.
            地址加法器合成物理地址的方法:
                物理地址 = 段地址 * 16(左移4位) + 偏移地址
    段地址很重要,用专门的寄存器存放段地址.
        4个段寄存器:
            CS-代码段寄存器
            DS-数据段寄存器
            SS-栈段寄存器
            ES-附加段寄存器
    任意时刻,SS:IP指向栈顶元素
    三种段:
        1.数据段(DS)
            1.1将段地址放在DS中.
            1.2用mov/add/sub等访问内存单元的指令时,CPU将我们定义的数据段中的内容当做数据段来访问.
        2.代码段(CS)
            2.1将段地址放在CS中,将段中第一条指令的偏移地址放在IP中.
        3.栈段(SS)
            3.1将段地址放在SS中,将栈顶单元的偏移地址放在SP中.
            3.2CPU在需要进行栈操作(push/pop)时,就将我们定义的栈段当做栈空间来用.
    汇编HelloWorld程序请看com/ws/assume/HelloWorld.asm
    由源程序到可执行文件的过程:
        源程序文件.asm ->编译->目标文件.obj ->连接 -> 可执行文件.exe -> 运行程序
    编译操作:
        在DOS窗口进入到masm目录下
        编译:执行 masm HelloWorld.asm(编译会生成对应的xxx.obj)
        连接:执行 link xxx.obj(连接会生成对应的xxx.exe)
    DOSBox使用:
        挂载: mount c d:\masm
    Debug是DOS系统中的著名的调试程序,也可以运行在windows的实模式下.
        使用debug程序,可以查看CPU各种寄存器中的内容,内存的情况,并且在机器指令级别跟踪程序的运行.
        debug能做什么?
        1.用R命令查看,改变cpu寄存器的内容
          rax rip
        2.用D命令查看内存中内容
          d -> 列出预设地址内存的128个字节的内容.
          d 段地址:偏移地址 -> 列出内存中指定地址处的内容
          d 段地址:偏移地址 结尾便宜地址 -> 列出内存中指定地址范围内的内容 ,如 d 2000:0 f
        3.用E命令改变内存中的内容
          e 段地址:偏移地址 数据1 数据2 -> 在指定地址修改内容,如 d 2000:0 12 23 45;
          e 段地址:偏移地址 回车 逐个访问式修改 空格接受继续修改下一位 回车(结束)
        4.用U命令将内存中的机器指令翻译成汇编指令
           u 段地址:偏移地址 查看汇编指令
        5.用A指令以汇编的格式在内存中写入机器指令.
        6.用T命令执行机器指令.
            t -> 将执行对应CS:IP的指令
        7.用A写入汇编指令
    8086PC工作过程简要概述:
        1.从 CS:IP指向内存单元读取指令,读取的指令进入指令缓冲器.
        2.IP = IP + 所读取指令的长度,从而指向下一条指令.
        3.执行指令,转到步骤1,重复这个过程.
        CPU将CS:IP指向的内存单元的内容作为指令
    如何修改CS:IP的值?
        1.使用Debug中的r命令可以改变寄存器的值,rsc/rip(但是debug属于是调试手段,并非程序方式)
        2.使用跳转jmp指令
            2.1同时修改CS:内容
               jmp 段地址:偏移地址,如 jmp 2ae3:3
            2.2仅修改IP值
                jmp 某一合法寄存器 ,如 jmp ax , jmp bx
    16位的字在内存中需要2个连续的字节存储,怎么存放?
        答: 低位字节存在低地址单元,高位字节存在高地址单元
            示例: 20000D(4e20H)存放在0,1两个单元,那么0单元存储的是20,1单元储存的是4e;
    CPU如何从内存单元中读取数据?
        要求: CPU要读取一个内存单元的时候,必须先给出这个内存单元的地址;
        原理: 在8086PC中,内存地址由段地址和偏地址组成(段地址:偏移地址)
        解决方案: DS和[address]配合
            用DS寄存器存放要访问的数据的段地址.
            偏移地址用[...]形式直接给出.
            示例: 假定DS=2000H
                mov al [0] -> 将 2000H:0的内存地址单元(2000H*16 + 0 = 20000H)赋值给AX的低位AL
                mov [0] al -> 将 将AX的低位AL的数据写到 DS:0中.
            注意: 段寄存器不能直接赋值,必须要通过通用寄存器赋值.
    处理字符问题:
        汇编程序中,用'xxxx'的方式指明数据是以字符的形式给出的,编译器将它们转化为相对应的ASCII码.
    在汇编中,add是加法,mov是移动,sub则是减法.
    add,sub,,mov一样，都有2个操作对象.
    例子:
        mov ax 9 -> 相当于 ax = 9
        add ax 9 -> 相当于 ax = ax + 9
    jmp: 为CS:IP赋值(CS:IP只能通过jmp赋值)
    例子:
        jmp ax; // 仅修改IP值

java程序后台运行:
   前台运行: java -jar jenkins.war -httpport=8080
   后台运行: nohup java -jar jenkins.war -httpport=8080 &

TCP状态:
     accept队列(FIFO)的容量,主要是接受新客户端的连接 (已经完成了三次握手的连接), 服务器还未accept的连接
     accept()操作其实就是从accept队列中取出一个连接(连接已经完成握手)进行处理
     如果服务器不进行accept()处理,那么当队列容量达到上限时,后续新增的连接将会被拒绝,有点类似于阻塞队列

     acceptCount数量其实就是表示TCP内核队列的长度,也就是TCP队列中的 A + B 队列的长度

      TCP内核中两个队列 A B 队列
      A 队列存放第一次握手成功的连接
      B 队列存放三次握手成功的连接(成功的同时会将A队列中的移除,将入到B队列中)
      通过accept()从B 队列取出队列
      A 队列数量 + B 队列队列数量 = backlog , 也就是此处的acceptCount = 100;

      TCP的连接状态 (SYN, FIN, ACK, PSH, RST, URG)
       1、SYN表示建立连接
       2、FIN表示关闭连接
       3、ACK表示响应
       4、PSH表示有 DATA数据传输
       5、RST表示连接重置。
     TCP握手的流程:
      1.client向server发送SYN数据包(syn=j),进入SYN_SEND状态
      2.server接收SYN,确认SYN(ACK=j+1),加入到A队列,并返回SYN+ACK应答给client,服务器进入SYN_RECV状态
      3.client接收到SYN+ACK数据包,并将ACK返回给server
      4.server确认ACK,将连接从A队列移除并加入到B队列中,连接建立完毕,client和server进入ESTABLISHED状态,可以开始传输数据

      A + B的长度大于backlog时，新的连接会被TCP内核拒绝
      若backlog过小,可能出现accept的速度跟不上,A,B队列满了,导致客户端无法建立连接
      注意:backlog对程序的连接数没影响,但影响的是未被accept取出的连接

     JDK默认是50个
     tomcat默认100
     netty默认 200