使用mysql定时任务及使用存储函数

mysql:
	查看是否开启事件 : show variables like 'event_scheduler';
	设置开启:
			set global event_scheduler = on;
			set @@global.event_scheduler = on;
			set global event_scheduler = 1;
			set @@global.event_scheduler = 1;
	删除事件: drop event if exists `事件名称`;
			  drop event test2_insert_5_minute;
	查看事件: show events;
	创建事件:
		案例1:
			drop event if exists `test_event`; -- 删除事件
			delimiter ;; -- 分隔符
			create definer=`root`@`localhost` event `test_event` on schedule every 1 second starts '2018-06-20 20:00:00' on completion preserve enable
			do
			    begin
			    	insert into user(name, age,sex) values('ws',18,'男'); --需要执行的sql任务
			    end
			;;
			delimiter ;
		案列2:
			create event if not exists test_event2 -- 事件名称
			on schedule every 1 second starts '2019-11-20 00:00:00'  -- 指定事件从11-20开始,间隔1秒执行
			on completion preserve	-- 执行完毕是否删除事件,此处是不删除该事件
			enable -- 启用事件
			do insert into user(name, age,sex) values('ws',18,'男');	-- 执行的业务逻辑(也可以直接调用存储过程)
	关闭事件
		alter event test_event disable;
	开启事件
		alter event test_event enable;
	存储过程
		delimiter ;;  --指定分隔符
		drop procedure if exists test_event5 ;;
		create procedure test_event4()
         begin
			declare i int default 0;
			while i<100 do
               insert into user(name,age,sex) values('ws',10,'男');
               set i=i+1;
			end while;
		 end ;;
	查看所有存储函数:
		show procedure status;
	事件调用存储过程:
		create event e1 on schedule every 1 week
		do call 存储过程名称(参数);
	调用存储过程:
		call 存储过程名称

    创建插入数据函数:
        delimiter $$
        drop function if exists addNum $$
        create function addNum(begin_num int,end_num int) returns int(10)
        begin

            while begin_num < end_num do
        	insert into user(age,name,sex) values(begin_num,'ws','男');
                set begin_num = begin_num + 1;
            end while;
            return begin_num;
        end $$
        delimiter ;
    调用函数: select addNum(100,6000)

SQL执行顺序:
    MySQL的语句一共分为11步,其中每一个操作都会产生一张虚拟的表，这个虚拟的表作为一个处理的输入，只是这些虚拟的表对用户来说是透明的，但是只有最后一个虚拟的表才会被作为结果返回。
    如果没有在语句中指定对应的操作，那么将会跳过相应的步骤。
       SELECT
       DISTINCT <select_list>
       FROM <left_table>
       <join_type> JOIN <right_table>
       ON <join_condition>
       WHERE <where_condition>
       GROUP BY <group_by_list>
       HAVING <having_condition>
       ORDER BY <order_by_condition>
       LIMIT <limit_number>

    1.FORM: 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1
    2.ON: 对虚表VT1进行ON筛选，只有那些符合<join-condition>的行才会被记录在虚表VT2中。
    3.JOIN: 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3, rug from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。
    4.WHERE: 对虚拟表VT3进行WHERE条件过滤。只有符合<where-condition>的记录才会被插入到虚拟表VT4中。
    5.GROUP BY: 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5.
    6.CUBE | ROLLUP: 对表VT5进行cube或者rollup操作，产生表VT6.
    7.HAVING: 对虚拟表VT6应用having过滤，只有符合<having-condition>的记录才会被 插入到虚拟表VT7中。
    8.SELECT: 执行select操作，选择指定的列，插入到虚拟表VT8中。
    9.DISTINCT: 对VT8中的记录进行去重。产生虚拟表VT9.
    10.ORDER BY: 将虚拟表VT9中的记录按照<order_by_list>进行排序操作，产生虚拟表VT10.
    11.LIMIT: 取出指定行的记录，产生虚拟表VT11, 并将结果返回。
------------------------------------------------------------------------------------------------------------------------
选择优化的数据类型:
    更小的通常更好。
        一般情况下，应该尽量使用可以正确存储数据的最小数据类型生!。更小的數据类型通常更快，因为它们占用更少的磁盘、内存和CPU缓存，并且处理时需要的CPU周
        期也更少;例如只需要存0-200，tinyint unsigned更好;
    简单就好
        简单数据类型的操作通常需要更少的CPU周期。例如，整型比字符操作代价更低，因为字符集和校对规则(排序规则)使字符比较比整型比较更复杂。
    尽量避免NULL
        通常情况下最好指定列为NOT NULL, 除非真的需要存储NULL值。
        如果查询中包含可为NULL的列，对MySQL来说更难优化，因为可为NULL的列使得索引、索引统计和值比较都更复杂。可为NULL的列会使用更多的存储空间，在
        MySQL里也需要特殊处理。当可为NULL的列被索引时，每个索引记录需要一个额外的字节，在MyISAM里甚至还可能导致固定大小的索引(例如只有一个整数列的
        索引)变成可变大小的索引。通常把可为NULL的列改为NOT NULL 带来的性能提升比较小，所以(调优时)没有必要首先在现有schema中查找并修改掉这种情况，
        除非确定这会导致问题。InnoDB使用单独的位(bit)存储NULL值，所以对于稀疏数据生4有很好的空间效率。但这一点不适用于MyISAM。

    很多MySQL的数据类型可以存储相同类型的数据，只是存储的长度和范围不一样、允许的精度不同，或者需要的物理空间( 磁盘和内存空间)不同。
    相同大类型的不同子类型数据有时也有些特殊的行为和属性。

整数类型
    有两种类型的数字:整数(whole number)和实数(real number)。如果存储整数，可以使用这几种整数类型: TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT。
分别使用8,16, 24, 32，64位存储空间。它们可以存储的值的范围从2(N-1) 到2(N-1)-1, 其中N是存储空间的位数。
    整数类型有可选的UNSIGNED属性，表示不允许负值，这大致可以使正数的上限提高一倍。
    例如TINYINT. UNSIGNED 可以存储的范围是0-255,而TINYINT的存储范围是-128
    MySQL可以为整数类型指定宽度，例如INT(11)，对大多数应用这是没有意义的:它不会限制值的合法范围,只是规定了MySQL的些交互工具(例如MySQL命令行客户端)
用来显示字符的个数。对于存储和计算来说，INT(1) 和INT(20)是相同的。

实数类型
    实数是带有小数部分的数字。然而，它们不只是为了存储小数部分，也可以使用DECIMAL存储比BIGINT还大的整数。MySQL既支持精确类型，也支持不精确类型。
    DECIMAL类型用于存储精确的小数。在MySQL 5.0和更高版本，DECIMAL 类型支持精确计算。
    浮点类型在存储同样范围的值时，通常比DECIMAL使用更少的空间。FLOAT使用4个字节存储。DOUBLE占用8个字节，相比FLOAT有更高的精度和更大的范围。
    和整数类型一样，能选择的只是存储类型， MySQL使用DOUBLE作为内部浮点计算的类型。

    浮点和DECIMAL类型都可以指定精度。对于DECIMAL列，可以指定小数点前后所允许的最大位数。这会影响列的空间消耗。MySQL 5.0和更高版本将数字打包保存到
    一个二进制字符串中(每4个字节存9个数字)。例如，DECIMAL(18,9) 小数点两边将各存储9个数字，-共使用9个字节:小数点前的数字用4个字节，小数点后的数字
    用4个字节，小数点本身占1个字节。
    因为需要额外的空间和计算开销，所以应该尽量只在对小数进行精确计算时才使用DECIMAL--例如存储财务数据。但在数据量比较大的时候，可以考虑使用BIGINT代替
    DECIMAL,将需要存储的货币单位根据小数的位数乘以相应的倍数即可。

字符串类型
    VARCHAR
        VARCHAR类型用于存储可变长字符串，是最常见的字符串数据类型。它比定长类型更节省空间，因为它仅使用必要的空间(例如，越短的字符串使用越少的空间)。
     有一种情况例外，如果MySQL表使用ROW FORMAT-FIXED 创建的话，每一行都会使用定长存储，这会很浪费空间。
        VARCHAR需要使用1或2个额外字节记录字符串的长度:如果列的最大长度小于或等于255字节，则只使用1个字节表示，否则使用2个字节。假设采用latin1字符集，
    一个VARCHAR(10)的列需要11 个字节的存储空间。VARCHAR( 1000)的列则需要1002个字节，因为需要2个字节存储长度信息。
        VARCHAR节省了存储空间，所以对性能也有帮助。但是，由于行是变长的，在UPDATE时可能使行变得比原来更长，这就导致需要做额外的工作。如果一个行占用
    的空间增长，并且在页内没有更多的空间可以存储，在这种情况下，不同的存储引擎的处理方式是不一样的。

    CHAR
        CHAR类型是定长的: MySQL总是根据定义的字符串长度分配足够的空间。当存储CHAR值时，MySQL会删除所有的末尾空格。
        CHAR值会根据需要采用空格进行填充以方便比较。填充和截取空格的行为在不同存储引擎都是一样的，因为这是在MySQL服务器层进行处理的。
        CHAR适合存储很短的字符串，或者所有值都接近同一个长度。例如，CHAR 非常适合存储密码的MD5值，因为这是一个定长的值。对于经常变更的数据，CHAR
    也比VARCHAR更好，因为定长的CHAR类型不容易产生碎片。对于非常短的列，CHAR比VARCHAR在存储空间上也更有效率。例如用CHAR(1)来存储只有Y和N的值，如果
    采用单字节字符集生只需要一一个字节，但是VARCHAR(1)却需要两个字节，因为还有一个记录长度的额外字节。

    使用VARCHAR(5)和VARCHAR(200)存储'hello'的空间开销是一样的。那么使用更短的列有什么优势吗?
    事实证明有很大的优势。更长的列会消耗更多的内存，因为MySQL通常会分配固定大小的内存块来保存内部值。尤其是使用内存临时表进行排序或操作时会特别糟
    糕。在利用磁盘临时表进行排序时也同样糟糕。所以最好的策略是只分配真正需要的空间。

    BLOB和TEXT类型
        BLOB和TEXT都是为存储很大的数据而设计的字符串数据类型，分别采用二进制和字符方式存储。

    使用枚举(ENUM) 代替字符串类型
        有时候可以使用枚举列代替常用的字符串类型。枚举列可以把一些不重复的字符串存储成一个预定义的集合。MySQL在存储枚举时非常紧凑，会根据列表值的
    数量压缩到一个或者两个字节中。MySQL在内部会将每个值在列表中的位置保存为整数，并且在表的frm文件中保存“数字-字符串”映射关系的“ 查找表”。
        create table test_enum (
          sex enum('男','女 ') not null  --建立对应的数字映射字符串关系 1->男,2->女
        );
        insert into test_enum (sex) values('女'),('男');
        插入的数据实际存储为整数，而不是字符串。查询如下可知: select sex + 0 from test_enum; 结果 为 2 , 1
        枚举字段是按照内部存储的整数而不是定义的字符串进行排序的:
        尽量避免使用数字作为枚举值,因为这样双重性质会导致混乱;

日期和时间类型
    DATETIME
        这个类型能保存大范围的值，从1001年到9999年，精度为秒。它把日期和时间封装到格式为YYY Y MMDDHHMMSS的整数中，与时区无关。使用8个字节的存储
    空间。默认情况下，MySQL以一种可排序的、无歧义的格式显示DATETIME值，例如 “2008-01-16 22:37:08”。这是ANSI标准定义的日期和时间表示方法。

    TIMESTAMP
        TIMESTAMP类型保存了从1970年1月1日午夜(格林尼治标准时间)以来的秒数，它和UNIX时间戳相同。TIMESTAMP 只使用4个字节的存储空间，因此它的范围比
    DATETIME小得多:只能表示从1970年到2038年。MySQL提供了from unixtime()函数把unix时间戳转换为日期，并提供了unix timestamp()函数把日期转换为unix时间戳。
        TIMESTAMP列默认为NOT NULL。

    如果在多个时区存储或访问数据，TIMESTAMP 和DATETIME的行为将很不一样。前者提供的值与时区有关系，后者则保留文本表示的日期和时间。
    除了特殊行为之外，通常也应该尽量使用TIMESTAMP,因为它比DATETIME空间效率更高。有时候人们会将Unix时间截存储为整数值，但这不会带来任何收益。用整数保存
    时间截的格式通常不方便处理，不推荐这样做。

位数据类型
    BIT
    SET

特殊类型:
    经常使用VARCHAR(15)列来存储IP地址。然而，它们实际上是32位无符号整数，不是字符串。用小数点将地址分成四段的表示方法只是为了让人们阅读容易。所以应该
    用无符号整数存储IP地址。MySQL提供INET ATON()和INET NTOA() 函数在这两种表示方法之间转换。
    SELECT INET_ATON("192.18.0.92") : 将IP转成数字
    SELECT INET_NTOA(3222405212) :    将数字转为IP
------------------------------------------------------------------------------------------------------------------------
提高alter table速度
    修改列默认值语句(如果数据量很大,需要更改所有的表数据,这时候速度不理想):
        ALTER TABLE ws.`test_enum` MODIFY COLUMN age TINYINT(3) NOT NULL DEFAULT 5;
    使用另一种方式提高速度:
        ALTER TABLE ws.`test_enum` ALTER COLUMN age SET DEFAULT 10;
        这个语句会直接修改frm文件而不涉及表数据。

------------------------------------------------------------------------------------------------------------------------
创建高性能的索引:
    在MySQL中，索引是在存储引擎层而不是服务器层实现的。所以，并没有统一的索引标准;

  B-Tree索引
    当人们谈论索引的时候，如果没有特别指明类型，那多半说的是B-Tree索引，它使用B-Tree数据结构来存储数据生;InnoDB则使用的是B+Tree

  哈希索引
    哈希索引(hash index)基于哈希表实现，只有精确匹配索引所有列的查询才有效生。对于每一行数据，存储引擎都会对所有的索引列计算一个
哈希码(hashcode)，哈希码是一个较小的值，并且不同键值的行计算出来的哈希码也不一样。哈希索引将所有的哈希码存储在索引中，同时在哈
希表中保存指向每个数据行的指针。

  空间数据索引(R-Tree)

  全文索引:
    全文索引是一种特殊类型的索引，它查找的是文本中的关键词，而不是直接比较索引中的值。全文搜索和其他几类索引的匹配方式完全不样。
它有许多需要注意的细节，如停用词、词干和复数、布尔搜索等。全文索引更类似于搜索引擎做的事情，而不是简单的WHERE条件匹配。
    在相同的列上同时创建全文索引和基于值的B-Tree索引不会有冲突，全文索引适用于MATCH AGAINST 操作，而不是普通的WHERE条件操作。

  索引的优点:
    1.索引大大减少了服务器需要扫描的数据量。
    2.索引可以帮助服务器避免排序和临时表。
    3.索引可以将随机I/O变为顺序I/O。

  建立单列索引: create table xxx ( id int not null , age tinyint not null , key(id) , key(age));
  建立多列索引: create table xxx(id int not null, age tinyint not null, key(id,age));

  MyISAM中主键索引和其他索引在结构上没有什么不同。主键索引就是一个名为PRIMARY的唯一非空索引。

  B+Tree索引和Hash索引区别:
    哈希索引适合等值查询，但是不无法进行范围查询;
    哈希索引没办法利用索引完成排序 哈希索引不支持多列联合索引的最左匹配规则;
    如果有大量重复键值得情况下，哈希索引的效率会很低，因为存在哈希碰撞问题;\

  在InnoDB里，索引B+Tree的叶子节点存储了整行数据的是主键索引，也被称之为聚簇索引。而索引B+Tree的叶子节点存储了主键的值
的是非主键索引，也被称之为非聚簇索引。
    不是所有类型的索引都可以成为覆盖索引。覆盖索引必须要存储索引的列，而哈希索引、空间索引和全文索引等都不存储索引列的值，所以MySQL只能使用B-Tree索引做覆盖索引;
    覆盖索引（covering index）:指一个查询语句的所需列只用从索引中就能够取得，不必从数据表中读取。也可以称之为实现了索引覆盖。
    如果一个索引包含(或者说覆盖)所有需要查询的字段的值，我们就称之为“覆盖索引”。
当一条查询语句符合覆盖索引条件时，MySQL只需要通过索引就可以返回查询所需要的数据，这样避免了查到索引后再返回表操作，减少I/O提高效率
    explain 显示索引覆盖的标注 : using index;

    联合索引:如(key1,key2,key3)，相当于创建了（key1）、(key1,key2)和(key1,key2,key3)三个索引，这就是最左匹配原则;

    聚簇索引以外的所有索引都称为二级索引。

    Index Condition Pushdown(索引下推):MySQL 5.6引入了索引下推优化，默认开启,使用SET optimizer_switch='index_condition_pushdown=off';可以将其关闭。
    例子: people表中（zipcode，lastname，firstname）构成一个索引
          select * from people where zipcode=‘95054’ and lastname like ‘%etrunia%’ and address like ‘%main street%’;
    如果没有使用索引下推技术，则MySQL会通过zipcode='95054’从存储引擎中查询对应的数据，返回到MySQL服务端，然后MySQL服务端基于lastname LIKE '%etrunia%'
和address LIKE '%Main Street%'来判断数据是否符合条件。 如果使用了索引下推技术，则MYSQL首先会返回符合zipcode='95054’的索引，然后根据lastname LIKE '%etrunia%'
和address LIKE '%Main Street%'来判断索引是否符合条件。如果符合条件，则根据该索引来定位对应的数据，如果不符合，则直接reject掉。
    有了索引下推优化，可以在有like条件查询的情况下，减少回表次数。

    查询优化器一条SQL语句的查询，可以有不同的执行方案，至于最终选择哪种方案，需要通过优化器进行选择，选择执行成本最低的方案。
    在一条单表查询语句真正执行之前，MySQL的查询优化器会找出执行该语句所有可能使用的方案，对比之后找出成本最低的方案。
    这个成本最低的方案就是所谓的执行计划。 优化过程大致如下：
        1、根据搜索条件，找出所有可能使用的索引
        2、计算全表扫描的代价
        3、计算使用不同索引执行查询的代价
        4、对比各种执行方案的代价，找出成本最低的那一个

    只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向(倒序或正序)都一样时，MySQL才能够使用索引来对结果做排序;
    如果查询需要关联多张表，则只有当ORDER BY子句引用的字段全部为第一个表时，才能使用索引做排序。
    ORDER BY子句和查找型查询的限制是一样的:需要满足索引的最左前缀的要求;否则，MySQL都需要执行排序操作，而无法利用索引排序。

    应该尽量扩展已有的索引而不是创建新索引。

    表中的索引越多插入速度会越慢。一般来说，增加新索 引将会导致INSERT、UPDATE、DELETE等操作的速度变慢，特别是当新增索引后导致达到了内存瓶颈的时候。

    在决定哪些索引可以被删除的时候要小心。因为二级索引的叶子节点包含了主键值(也包含了索引列的值)，所以在列(A)上的索引就相当于在(A, ID)上的索引(ID是主键)。

分页SQL优化:
    已知user表数据161W; 已有索引: 1.主键索引id; 2.复合索引 index_sex_age(sex,age)
    未优化分页SQL: select * from `user` where sex = '女' order by age limit 200000, 20;  耗时:14s
    优化后SQL: 使用延迟关联: select * from user inner join (select sex ,age from `user` where sex = '女' order by age limit 200000, 20) a using(sex,age) 耗时0.19

修改表的存储引擎:
    alter table xxx engine=innodb;
------------------------------------------------------------------------------------------------------------------------
查询性能优化:

    SQL执行大概流程:
        1.客户端发送一条查询给服务器。
        2.服务器先检查查询缓存，如果命中了缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段。
        3.服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划。
        4.MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询。
        5.将结果返回给客户端。

    show full processlist命令: 该命令返回结果中的Command列就表示当前的状态。在一个查询的生命周期中，状态会变化很多次。
        sleep : 线程正在等待客户端发送新的请求。
        query : 线程正在执行查询或者正在将结果发送给客户端。
        其他....

    提前终止查询:在发现已经满足查询需求的时候，MySQL总是能够立刻终止查询。一个典型的例子就是当使用了LIMIT子句的时候。

    列表IN()的比较:在很多数据库系统中，IN()完全等同于多个OR条件的子句，因为这两者是完全等价的。在MySQL中这点是不成立的，MySQL将IN()列表中的数据先进行排序，
然后通过二分查找的方式来确定列表中的值是否满足条件，这是一个0(logn)复杂度的操作，等价地转换成OR查询的复杂度为O(n),对于IN()列表中有大量取值的时候，MySQL的处理速度将会更快。

    最大值和最小值优化:
        id为主键,name无索引
        原SQL:      select min(id) as id from `user` where name = 'ws'   耗时1.7s
        优化后:  select id from `user` where name = 'ws' limit 1      耗时0.003s
        解释:  name字段无索引,mysql需要全表扫描,速度慢. 但是由于id主键是严格根据大小顺序排序的,所以可以实话优化后的sql来查询结果;
        缺点:  优化后的sql已经无法看清原sql的含义;

        原SQL:   select max(id) as id from `user` where name = 'ws'                    耗时1.7s
        优化后:  select id from `user` where name = 'ws' order by id desc limit 1      耗时0.002s

    优化COUNT()查询:
        在统计列值时要求列值是非空的(不统计NULL)。
        当我们使用COUNT(*)的时候，它会忽略所有的列而直接统计所有的行数。

        对一个字段的不同值进行统计数量:
          sum统计:    select sum(if(age = 50,1,0)) as f , sum(if(age = 10 ,1 ,0)) as t , sum(if(age = 11,1,0)) as e   from user
          count统计:  select count(age = 50 or null) as f ,count(age = 10 or null) as t ,count(age = 11 or null) as e from user   速度稍快
          group by :  select count(*) , age from user group by age
    关于MyISAM的误解:
        一个容易产生的误解就是:MyISAM的COUNT()函数总是非常快，不过这是有前提条件的，即只有没有任何WHERE条件的COUNT(*)才非常快，
因为此时无须实际地去计算表的行数。MySQL可以利用存储引擎的特性直接获得这个值。如果MySQL知道某列col不可能为NULL值，那么MySQL内部会将COUNT(CoL)表达式优化为COUNT(*)。

    优化关联查询
        1.确保ON或者USING子甸中的列上有索引。在创建索引的时候就要考虑到关联的顺序。当表A和表B用列c关联的时候，如果优化器的关联顺序是B、A,那么就不需要在
B表的对应列上建上索引。没有用到的索引只会带来额外的负担。一般来说，除非有其他理由，否则只需要在关联顺序中的第二个表的相应列上创建索引.
        2.确保任何的GROUP BY和ORDER BY中的表达式只涉及到一个表中的列，这样MySQL才有可能使用索引来优化这个过程。
        3.当升级MySQL的时候需要注意:关联语法、运算符优先级等其他可能会发生变化的地方。因为以前是普通关联的地方可能会变成笛卡儿积，不同类型的关联可能会
生成不同的结果等。

    优化子查询
        尽可能使用关联查询代替，至少当前的MySQL版本需要这样。

    优化group by和distinct
        如果没有通过order by子句显式地指定排序列，当查询使用group by子句的时候，结果集会自动按照分组的字段进行排序。如果不关心结果集的顺序，
而这种默认排序又导致了需要文件排序，则可以使用order by null, 让mysql不再进行文件排序。也可以在group by子句中直接使用desc或者asc关键字，使分
组的结果集按需要的方向排序。

    优化limit分页(适合数据量大的时候)
       原SQL:     select * from user order by age limit 500000,10;   耗时2.5S
       优化后SQL: select * from user inner join (select id from user order by age limit 500000,10) as t using(id)  耗时0.3S
       这里的“延迟关联”将大大提升查询效率，它让MySQL扫描尽可能少的页面，获取需要访问的记录后再根据关联列回原表查询需要的所有列。

    优化union查询
        除非确实需要服务器消除重复的行，否则就一定要使用union all, 这一点很重要。如果没有all关键字，mysql会给临时表加上distinct选项，
这会导致对整个临时表的数据做唯性检查。这样做的代价非常高。

    使用用户自定义变量
        用户自定义变量是一个用来存储内容的临时容器，在连接MySQL的整个过程中都存在。可以使用下面的SET和SELECT语句来定义它们生:
            SET @age := 30;
            SET @max_age = (SELECT MAX(age) FROM USER);
        使用:
            SELECT * FROM USER WHERE age = @age;
        使用注意:
            1.使用自定义变量的查询，无法使用查询缓存。
            2.不能在使用常量或者标识符的地方使用自定义变量，例如表名、列名和LIMIT子句中。
            3.用户自定义变量的生命周期是在一个连接中有效，所以不能用它们来做连接间的通信。
            4.变量名称不区别大小(5.7版本是如此);
            5.MySQL优化器在某些场景下可能会将这些变量优化掉，这可能导致代码不按预想的方式运行。
            6.赋值的顺序和赋值的时间点并不总是固定的，这依赖于优化器的决定。
            7.赋值符号:= 的优先级非常低，所以需要注意，赋值表达式应该使用明确的括号。
            8.使用未定义变量不会产生任何语法错误，如果没有意识到这一点，非常容易犯错。

        统计排序,相同的数量归为同一个名次:
            select  age ,
            @curr := total as count ,
            @rank := if(@curr <> @prev,@rank + 1, @rank) as rank ,
            @prev := @curr as dummy
            from ( select  age , count(*) as total from user group by age order by total desc) a

        避免重复查询刚刚更新的数据
            不使用变量需要这样:
                update user set update_time = now()  where id = 1 ;
                select name from user where id = 1 ;
            使用自定义变量这么做:
                update user set update_time = now() where id = 1 and @now := now;
                select @now;

        统计更新和插入的数量
            insert into `test_index`(id,age,address) values(1,30,'神马市'),(2,66,'流云县'),(41,88,'飞羽村')
            on duplicate key update age = values(age) + (0 * (@update := @update + 1));

        二选一查询union all: 在一个表中查到数据那就无需查另外一张表,否则查另外一张表
            SELECT  GREATEST(@found := -1 , id) AS id , 'test_index' AS table_name FROM `test_index` WHERE id = 1  -- 从test_index查询id = 1,如果存在,则@found 不为null,就不去查询stu表;
            UNION ALL SELECT id , 'stu' AS table_name FROM `stu` WHERE id = 1 AND @found IS NULL  -- 当@found 为 null,即test_index查询不到数据,那么从stu表查询;
            UNION ALL SELECT 1, 'reset' AS table_name FROM DUAL WHERE (@found := NULL) IS NOT NULL  -- 永远没数据,只是将@found赋值为null;

    greatest函数,参数不限,返回最大的值,如果参数有一个为null,则返回null;
    least函数,参数不限,返回最小的值,若参数有一个为null,则返回null;



------------------------------------------------------------------------------------------------------------------------
事物
    1.原子性(atomicity)
        一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分
    操作，这就是事务的原子性。

    2.一致性 (consistency)
        数据库总是从一个一致性的状态转换到另外一个一致性的状态。

    3.隔离性(isolation)
        通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。

    4.持久性(durability)
        一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。

    隔离级别
        1.read uncommitted (未提交读)
            在READ UNCOMMITTED 级别，事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这也被称为脏读(Dirty Read)。
            这个级别会导致很多问题，从性能上来说，READ UNCOMITTED 不会比其他的级别好太多，但却缺乏其他级别的很多好处，除非真的有非常必要的理由，
        在实际应用中一般很少使用。

        2.READ COMMITTED (提交读)
        大多数数据库系统的默认隔离级别都是READ COMMITTED (但MySQL不是)。READCOMMITTED满足前面提到的隔离性的简单定义:一个事务开始时，只能“看见”已
    经提交的事务所做的修改。换句话说，一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的。
        这个级别有时候也叫做不可重复读(non repeatable read)，因为两次执行同样的查询，可能会得到不一样的结果。
    REPEATABLE READ (可重复读)

       3.REPEATABLE READ
         解决了脏读的问题。该级别保证了在同一个事务中多次读取同样记录的结果是一致的。但是理论上，可重复读隔离级别还是无法解决另外
    一个幻读(Phantom Read)的问题。所谓幻读，指的是当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取
    该范围的记录时，会产生幻行(Phantom Row)。InnoDB和XtraDB存储引擎通过多版本并发控制(MVCC， Multiversion Concurrency Control) 解决了幻读的问题。
        可重复读是MySQL的默认事务隔离级别。

       4.SERIALIZABLE (可串行化)
         SERIALIZABLE是最高的隔离级别。它通过强制事务串行执行，避免了前面说的幻读的问题。简单来说，SERIALIZABLE 会在读取的每一行数据上都加锁，
    所以可能导致大量的超时和锁争用的问题。
         实际应用中也很少用到这个隔离级别，只有在非常需要确保数据的一致性而且可以接受没有并发的情况下，才考虑采用该级别。

------------------------------------------------------------------------------------------------------------------------
服务器配置:
    配置项设置都使用小写，单词之间用下画线或横线隔开。

    配置项可以有多个作用域。有些设置是服务器级的(全局作用域)，有些对每个连接是不同的(会话作用域)，剩下的一些是对象级的。
许多会话级变量跟全局变量相等，可以认为是默认值。如果改变会话级变量，它只影响改动的当前连接，当连接关闭时所有参数变更都会失效。

    除了在配置文件中设置变量，有很多变量(但不是所有)也可以在服务器运行时修改。MySQL把这些归为动态配置变量。
    如果动态地设置变量，要注意MySQL关闭时可能丢失这些设置。如果想保持这些设置,还是需要修改配置文件。
    如果在服务器运行时修改了变量的全局值，这个值对当前会话和其他任何已经存在的会话都不起效果，这是因为会话的变量值是在连接创建时
从全局值初始化来的。在每次变更之后，应该检查SHOW GL0BAL VARIABLES的输出，确认已经按照期望变更了。





------------------------------------------------------------------------------------------------------------------------


